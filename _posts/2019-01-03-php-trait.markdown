---
layout:       post
title:        "浅析PHP Trait用法"
subtitle:     ""
date:         2019-01-03 19:20:00
author:       "sunpwork"
header-mask:  0.3
catalog:      true
tags:
    - 语法基础
    - PHP
    - Trait
    - 类
    - 代码复用
---

>自PHP 5.4起，PHP实现了一种代码复用的方法，称为trait。（本章节案例内容来源 [PHP官方文档](http://php.net/manual/zh/language.oop5.traits.php)）

# 简介

Trait是为类似PHP的单继承语言而准备的一种代码复用机制。Trait为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用方法(method)。Trait和Class组合的语义定义了一种减少复杂性的方式，避免传统多继承和Mixin类相关的典型问题。

Trait和Class相似，但仅仅旨在用细粒度和一致的方式来组合功能。单独的Trait是无法进行实例化的，它为传统继承增加了水平特征性的组合，也就是说，几个类(Class)之间可以不需要通过继承关系而是通过Trait来进行方法的复用。

# Trait示例
``` php
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
```
`ezcReflectionMethod`和`ezcReflectionFunction`两个类通过使用 `use ezcReflectionReturnInfo`来插入`ezcReflectionReturnInfo`这个`trait`中的两个函数。

# 优先级
``` php
<?php
class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base {
    use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
```
__Trait方法会覆盖基类中的方法__，上例中`MyHelloWorld`类中从基类`Base`中继承的方法`sayHello`被插入的`SayWorld` trait中的同名方法所覆盖，所以`MyHelloWorld`类调用的`sayHello`是trait中的方法，程序输出`Hello World!`。
``` php
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

class TheWorldIsNotEnough {
    use HelloWorld;
    public function sayHello() {
        echo 'Hello Universe!';
    }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
```
__当前类中的方法会覆盖 trait 方法，__ 上例中插入的`HelloWorld` trait中的`sayHello`方法被当前类中的同名方法给覆盖了，所以`TheWorldIsNotEnough`类调用的是本类中定义的`sayHello`方法，程序输出结果为`Hello Universe!`。

# 多个trait
``` php
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld {
    use Hello, World;
    public function sayExclamationMark() {
        echo '!';
    }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();
```
通过逗号分隔，在`use`声明列出多个`trait`，可以都插入到一个类中。上列中`MyHelloWorld`类同时插入了`Hello`和`World`两个`trait`的所有方法，所以案例输出`Hello World!`。

# 冲突的解决
如果两个`trait`都插入了一个同名的方法，如果没有明确解决冲突的话将会导致致命错误(a fatal error)。

为了解决多个`trait`在同一个类中的命名冲突，需要使用`insteadof`操作符来明确使用冲突方法中的哪一个。

`insteadof`仅可以排除掉其他冲突的方法，`as`操作符可以为某个方法引入别名来用以解决冲突。
```php
<?php
trait A {
    public function smallTalk() {
        echo 'a';
    }
    public function bigTalk() {
        echo 'A';
    }
}

trait B {
    public function smallTalk() {
        echo 'b';
    }
    public function bigTalk() {
        echo 'B';
    }
}

class Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}
```
在本例中`Talker`使用了trait A和B，由于A和B有冲突的方法，其定义了使用`trait B`中的`smallTalk`替代`trait A`中的同名方法，使用`trait A`中的`bigTalk`替代`trait B`中的同名方法。

`Aliased_Talker`中使用`as`操作符定义`talk`作为`trait B`的`bigTalk`方法的别名来解决冲突。

# 修改方法的访问控制
使用`as`语句还可以用来调整方法的访问控制
``` php
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

// 修改 sayHello 的访问控制
class MyClass1 {
    use HelloWorld { sayHello as protected; }
}

// 给方法一个改变了访问控制的别名
// 原版 sayHello 的访问控制则没有发生变化
class MyClass2 {
    use HelloWorld { sayHello as private myPrivateHello; }
}
```

# 从 trait 来组成 trait
正如`class`能使用`trait`一样，其他的`trait`也能够使用`trait`。在`trait`定义是通过一个或多个`trait`，能够组合其他`trait`中部分或全部成员。
``` php
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World!';
    }
}

trait HelloWorld {
    use Hello, World;
}

class MyHelloWorld {
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
```

# trait的抽象成员
为了对使用的类施加强制要求，trait支持抽象方法的使用。
``` php
<?php
trait Hello {
    public function sayHelloWorld() {
        echo 'Hello'.$this->getWorld();
    }
    abstract public function getWorld();
}

class MyHelloWorld {
    private $world;
    use Hello;
    public function getWorld() {
        return $this->world;
    }
}
```
这里`trait Hello`中声明了一个抽象方法`getWorld`，所以`MyHelloWorld`要使用这个`trait`必须要在类中定义`getWorld`的实现。

# Trait的静态成员
Trait 可以被静态成员静态方法定义。
``` php
<?php
trait Counter {
    public function inc() {
        static $c = 0;
        $c = $c + 1;
        echo "$c\n";
    }
}

class C1 {
    use Counter;
}

class C2 {
    use Counter;
}

$o = new C1(); $o->inc(); // echo 1
$p = new C2(); $p->inc(); // echo 1
```
```php
<?php
trait StaticExample {
    public static function doSomething() {
        return 'Doing something';
    }
}

class Example {
    use StaticExample;
}

Example::doSomething();
```

# Trait的属性
``` php
<?php
trait PropertiesTrait {
    public $x = 1;
}

class PropertiesExample {
    use PropertiesTrait;
}

$example = new PropertiesExample;
$example->x;
```
`trait`定义一个属性后，类就不能定义同名属性了，否则会报错。有种情况例外：属性是兼容的（同样的访问可见度、初始默认值）
``` php
<?php
trait PropertiesTrait {
    public $same = true;
    public $different = false;
}

class PropertiesExample {
    use PropertiesTrait;
    public $same = true; // PHP 7.0.0 后没问题，之前版本是 E_STRICT 提醒
    public $different = true; // 致命错误
}
```